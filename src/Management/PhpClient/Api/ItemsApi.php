<?php
/**
 * ItemsApi
 * PHP version 5
 *
 * @category Class
 * @package  DoofinderManagement
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Doofinder Management API
 *
 * # Introduction  Doofinder's management API allows you to perform some of the administrative tasks you can do on your search engines using the Doofinder control panel, directly from your code.  # Basics  ## Endpoint  All requests should be done via `https` to the right endpoint:  ``` https://{search-zone}-api.doofinder.com ```  Where `{search-zone}` is the code of the datacenter where your search engines are located.  For instance:  ``` https://eu1-api.doofinder.com https://us1-api.doofinder.com ```  ## Authentication  To authenticate you need a management API key. If you don't have one you can generate it in the Doofinder Admin by going to your Account and then to API Keys.  A valid API key looks like this:  ``` ab46030xza33960aac71a10248489b6c26172f07 ```  ### API Token  You can authenticate with the previous API key in header as a Token. The correct way to authenticate is to send a HTTP Header with the name `Authorization` and the value `Token {api-key}`  I.e.:  ``` Authorization: Token ab46030xza33960aac71a10248489b6c26172f07 ```  ### JWT Token (Draft)  If you prefer you can authenticate with a [JSON Web Token](https://jwt.io). The token must be signed with an API management key and there are some claims required in the JWT payload. These claims are:    * `iat` (issued at): Creation datetime timestamp, i.e. the moment when the JWT was created.    * `exp` (expiration time): Expiration datetime timestamp, i.e. the moment when the JWT is going to expire and will no longer be valid. The time span between issued and expiration dates must be shorter than a week.    * `name`: Your user code. It is your unique identifier as doofinder user. You can find this code in your profile page in the Doofinder's administration panel.  To authenticate using JWT you must send a HTTP header with the name `Authorization` and the value `Bearer {JWT-token}`.  I.e.:  ``` Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoidGVzdCIsImlhdCI6MTUxNjIzOTAyMn0.QX_3HF-T2-vlvzGDbAzZyc1Cd-J9qROSes3bxlgB4uk ```  ## Conventions  Along most of the code samples you will find placeholders for some common variable values. They are:    * `{hashid}`: The search engine's unique id. e.g.: d8fdeab7fce96a19d3fc7b0ca7a1e98b.    * `{index}`: When storing items, they're always stored under a certain _index_. e.g.: product.    * `{token}`: Your personal authentication token obtained in the control panel.    * `{uid}`: The unique identificator of a Doofinder User.  # Objects  ## Search Engines  A **search engine**:  - Consists of a set of indices and options to configure them. - Must contain at least one index. - Can be uniquely identified by a hash we call `hashid`. - Can be _processed_, which involves reading the data from the provided data sources (usually URLs), indexing the data in temporary indices and finally make the indices ready for use.  ## Indices  An **index**:  - Is a set of **data items** and options to describe those items, the description of the **data sources** to get them and the way they can be searched. - May have one (and only one) temporary index. A temporary index shares the same options of the main index. There are operations to manage temporary indices like create, delete, reindex, etc.  The usual flow for an index is to create a temporary index, index items on it and replace the main index with the temporary one.  This way you can reindex your whole data having zero downtime of the search service.  ## Data Sources  A **data source**:  - Defines the location for retrieving items for indexing and the most common is just a file URL. - Is accessed when the search engine is being processed.  An index does not need a data source if you index the items directly using the API.  ## Items  Items:  - Are the objects stored in an index. - Are returned as search results. - May have different schemas (collections of fields) depending on their index **preset** (if any). There are some default presets, being `product` the most usual, which describes items with a price, category, etc.
 *
 * OpenAPI spec version: 2.0
 * Contact: support@doofinder.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.20
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace DoofinderManagement\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use DoofinderManagement\ApiException;
use DoofinderManagement\Configuration;
use DoofinderManagement\HeaderSelector;
use DoofinderManagement\ObjectSerializer;

/**
 * ItemsApi Class Doc Comment
 *
 * @category Class
 * @package  DoofinderManagement
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ItemsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation itemCreate
     *
     * Creates an item.
     *
     * @param  map[string,object] $body body (required)
     * @param  string $hashid Unique id of a search engine. (required)
     * @param  string $name Name of an index. (required)
     *
     * @throws \DoofinderManagement\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DoofinderManagement\Model\Item
     */
    public function itemCreate($body, $hashid, $name)
    {
        list($response) = $this->itemCreateWithHttpInfo($body, $hashid, $name);
        return $response;
    }

    /**
     * Operation itemCreateWithHttpInfo
     *
     * Creates an item.
     *
     * @param  map[string,object] $body (required)
     * @param  string $hashid Unique id of a search engine. (required)
     * @param  string $name Name of an index. (required)
     *
     * @throws \DoofinderManagement\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DoofinderManagement\Model\Item, HTTP status code, HTTP response headers (array of strings)
     */
    public function itemCreateWithHttpInfo($body, $hashid, $name)
    {
        $returnType = '\DoofinderManagement\Model\Item';
        $request = $this->itemCreateRequest($body, $hashid, $name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DoofinderManagement\Model\Item',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation itemCreateAsync
     *
     * Creates an item.
     *
     * @param  map[string,object] $body (required)
     * @param  string $hashid Unique id of a search engine. (required)
     * @param  string $name Name of an index. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function itemCreateAsync($body, $hashid, $name)
    {
        return $this->itemCreateAsyncWithHttpInfo($body, $hashid, $name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation itemCreateAsyncWithHttpInfo
     *
     * Creates an item.
     *
     * @param  map[string,object] $body (required)
     * @param  string $hashid Unique id of a search engine. (required)
     * @param  string $name Name of an index. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function itemCreateAsyncWithHttpInfo($body, $hashid, $name)
    {
        $returnType = '\DoofinderManagement\Model\Item';
        $request = $this->itemCreateRequest($body, $hashid, $name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'itemCreate'
     *
     * @param  map[string,object] $body (required)
     * @param  string $hashid Unique id of a search engine. (required)
     * @param  string $name Name of an index. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function itemCreateRequest($body, $hashid, $name)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling itemCreate'
            );
        }
        // verify the required parameter 'hashid' is set
        if ($hashid === null || (is_array($hashid) && count($hashid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $hashid when calling itemCreate'
            );
        }
        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling itemCreate'
            );
        }

        $resourcePath = '/api/v2/search_engines/{hashid}/indices/{name}/items/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($hashid !== null) {
            $resourcePath = str_replace(
                '{' . 'hashid' . '}',
                ObjectSerializer::toPathValue($hashid),
                $resourcePath
            );
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation itemDelete
     *
     * Deletes an item from the index.
     *
     * @param  string $hashid Unique id of a search engine. (required)
     * @param  string $name Name of an index. (required)
     * @param  string $item_id Unique identifier of an item inside an index. (required)
     *
     * @throws \DoofinderManagement\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function itemDelete($hashid, $name, $item_id)
    {
        $this->itemDeleteWithHttpInfo($hashid, $name, $item_id);
    }

    /**
     * Operation itemDeleteWithHttpInfo
     *
     * Deletes an item from the index.
     *
     * @param  string $hashid Unique id of a search engine. (required)
     * @param  string $name Name of an index. (required)
     * @param  string $item_id Unique identifier of an item inside an index. (required)
     *
     * @throws \DoofinderManagement\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function itemDeleteWithHttpInfo($hashid, $name, $item_id)
    {
        $returnType = '';
        $request = $this->itemDeleteRequest($hashid, $name, $item_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation itemDeleteAsync
     *
     * Deletes an item from the index.
     *
     * @param  string $hashid Unique id of a search engine. (required)
     * @param  string $name Name of an index. (required)
     * @param  string $item_id Unique identifier of an item inside an index. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function itemDeleteAsync($hashid, $name, $item_id)
    {
        return $this->itemDeleteAsyncWithHttpInfo($hashid, $name, $item_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation itemDeleteAsyncWithHttpInfo
     *
     * Deletes an item from the index.
     *
     * @param  string $hashid Unique id of a search engine. (required)
     * @param  string $name Name of an index. (required)
     * @param  string $item_id Unique identifier of an item inside an index. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function itemDeleteAsyncWithHttpInfo($hashid, $name, $item_id)
    {
        $returnType = '';
        $request = $this->itemDeleteRequest($hashid, $name, $item_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'itemDelete'
     *
     * @param  string $hashid Unique id of a search engine. (required)
     * @param  string $name Name of an index. (required)
     * @param  string $item_id Unique identifier of an item inside an index. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function itemDeleteRequest($hashid, $name, $item_id)
    {
        // verify the required parameter 'hashid' is set
        if ($hashid === null || (is_array($hashid) && count($hashid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $hashid when calling itemDelete'
            );
        }
        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling itemDelete'
            );
        }
        // verify the required parameter 'item_id' is set
        if ($item_id === null || (is_array($item_id) && count($item_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $item_id when calling itemDelete'
            );
        }

        $resourcePath = '/api/v2/search_engines/{hashid}/indices/{name}/items/{item_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($hashid !== null) {
            $resourcePath = str_replace(
                '{' . 'hashid' . '}',
                ObjectSerializer::toPathValue($hashid),
                $resourcePath
            );
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'item_id' . '}',
                ObjectSerializer::toPathValue($item_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation itemIndex
     *
     * Scrolls through all index items
     *
     * @param  string $hashid Unique id of a search engine. (required)
     * @param  string $name Name of an index. (required)
     * @param  string $scroll_id Unique identifier for the scroll. The scroll saves a \&quot;pointer\&quot; to the last fetched page so each successive request to the same scroll_id return a new page. (optional)
     * @param  int $rpp _Results per page_. How many items are fetched per page/request. (optional)
     *
     * @throws \DoofinderManagement\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DoofinderManagement\Model\Scroller
     */
    public function itemIndex($hashid, $name, $scroll_id = null, $rpp = null)
    {
        list($response) = $this->itemIndexWithHttpInfo($hashid, $name, $scroll_id, $rpp);
        return $response;
    }

    /**
     * Operation itemIndexWithHttpInfo
     *
     * Scrolls through all index items
     *
     * @param  string $hashid Unique id of a search engine. (required)
     * @param  string $name Name of an index. (required)
     * @param  string $scroll_id Unique identifier for the scroll. The scroll saves a \&quot;pointer\&quot; to the last fetched page so each successive request to the same scroll_id return a new page. (optional)
     * @param  int $rpp _Results per page_. How many items are fetched per page/request. (optional)
     *
     * @throws \DoofinderManagement\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DoofinderManagement\Model\Scroller, HTTP status code, HTTP response headers (array of strings)
     */
    public function itemIndexWithHttpInfo($hashid, $name, $scroll_id = null, $rpp = null)
    {
        $returnType = '\DoofinderManagement\Model\Scroller';
        $request = $this->itemIndexRequest($hashid, $name, $scroll_id, $rpp);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DoofinderManagement\Model\Scroller',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation itemIndexAsync
     *
     * Scrolls through all index items
     *
     * @param  string $hashid Unique id of a search engine. (required)
     * @param  string $name Name of an index. (required)
     * @param  string $scroll_id Unique identifier for the scroll. The scroll saves a \&quot;pointer\&quot; to the last fetched page so each successive request to the same scroll_id return a new page. (optional)
     * @param  int $rpp _Results per page_. How many items are fetched per page/request. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function itemIndexAsync($hashid, $name, $scroll_id = null, $rpp = null)
    {
        return $this->itemIndexAsyncWithHttpInfo($hashid, $name, $scroll_id, $rpp)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation itemIndexAsyncWithHttpInfo
     *
     * Scrolls through all index items
     *
     * @param  string $hashid Unique id of a search engine. (required)
     * @param  string $name Name of an index. (required)
     * @param  string $scroll_id Unique identifier for the scroll. The scroll saves a \&quot;pointer\&quot; to the last fetched page so each successive request to the same scroll_id return a new page. (optional)
     * @param  int $rpp _Results per page_. How many items are fetched per page/request. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function itemIndexAsyncWithHttpInfo($hashid, $name, $scroll_id = null, $rpp = null)
    {
        $returnType = '\DoofinderManagement\Model\Scroller';
        $request = $this->itemIndexRequest($hashid, $name, $scroll_id, $rpp);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'itemIndex'
     *
     * @param  string $hashid Unique id of a search engine. (required)
     * @param  string $name Name of an index. (required)
     * @param  string $scroll_id Unique identifier for the scroll. The scroll saves a \&quot;pointer\&quot; to the last fetched page so each successive request to the same scroll_id return a new page. (optional)
     * @param  int $rpp _Results per page_. How many items are fetched per page/request. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function itemIndexRequest($hashid, $name, $scroll_id = null, $rpp = null)
    {
        // verify the required parameter 'hashid' is set
        if ($hashid === null || (is_array($hashid) && count($hashid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $hashid when calling itemIndex'
            );
        }
        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling itemIndex'
            );
        }

        $resourcePath = '/api/v2/search_engines/{hashid}/indices/{name}/items/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($scroll_id !== null) {
            $queryParams['scroll_id'] = ObjectSerializer::toQueryValue($scroll_id);
        }
        // query params
        if ($rpp !== null) {
            $queryParams['rpp'] = ObjectSerializer::toQueryValue($rpp);
        }

        // path params
        if ($hashid !== null) {
            $resourcePath = str_replace(
                '{' . 'hashid' . '}',
                ObjectSerializer::toPathValue($hashid),
                $resourcePath
            );
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation itemShow
     *
     * Gets an item from the index.
     *
     * @param  string $hashid Unique id of a search engine. (required)
     * @param  string $name Name of an index. (required)
     * @param  string $item_id Unique identifier of an item inside an index. (required)
     *
     * @throws \DoofinderManagement\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DoofinderManagement\Model\Item
     */
    public function itemShow($hashid, $name, $item_id)
    {
        list($response) = $this->itemShowWithHttpInfo($hashid, $name, $item_id);
        return $response;
    }

    /**
     * Operation itemShowWithHttpInfo
     *
     * Gets an item from the index.
     *
     * @param  string $hashid Unique id of a search engine. (required)
     * @param  string $name Name of an index. (required)
     * @param  string $item_id Unique identifier of an item inside an index. (required)
     *
     * @throws \DoofinderManagement\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DoofinderManagement\Model\Item, HTTP status code, HTTP response headers (array of strings)
     */
    public function itemShowWithHttpInfo($hashid, $name, $item_id)
    {
        $returnType = '\DoofinderManagement\Model\Item';
        $request = $this->itemShowRequest($hashid, $name, $item_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DoofinderManagement\Model\Item',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation itemShowAsync
     *
     * Gets an item from the index.
     *
     * @param  string $hashid Unique id of a search engine. (required)
     * @param  string $name Name of an index. (required)
     * @param  string $item_id Unique identifier of an item inside an index. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function itemShowAsync($hashid, $name, $item_id)
    {
        return $this->itemShowAsyncWithHttpInfo($hashid, $name, $item_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation itemShowAsyncWithHttpInfo
     *
     * Gets an item from the index.
     *
     * @param  string $hashid Unique id of a search engine. (required)
     * @param  string $name Name of an index. (required)
     * @param  string $item_id Unique identifier of an item inside an index. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function itemShowAsyncWithHttpInfo($hashid, $name, $item_id)
    {
        $returnType = '\DoofinderManagement\Model\Item';
        $request = $this->itemShowRequest($hashid, $name, $item_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'itemShow'
     *
     * @param  string $hashid Unique id of a search engine. (required)
     * @param  string $name Name of an index. (required)
     * @param  string $item_id Unique identifier of an item inside an index. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function itemShowRequest($hashid, $name, $item_id)
    {
        // verify the required parameter 'hashid' is set
        if ($hashid === null || (is_array($hashid) && count($hashid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $hashid when calling itemShow'
            );
        }
        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling itemShow'
            );
        }
        // verify the required parameter 'item_id' is set
        if ($item_id === null || (is_array($item_id) && count($item_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $item_id when calling itemShow'
            );
        }

        $resourcePath = '/api/v2/search_engines/{hashid}/indices/{name}/items/{item_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($hashid !== null) {
            $resourcePath = str_replace(
                '{' . 'hashid' . '}',
                ObjectSerializer::toPathValue($hashid),
                $resourcePath
            );
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'item_id' . '}',
                ObjectSerializer::toPathValue($item_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation itemTempCreate
     *
     * Creates an item in the temporal index.
     *
     * @param  map[string,object] $body body (required)
     * @param  string $hashid Unique id of a search engine. (required)
     * @param  string $name Name of an index. (required)
     *
     * @throws \DoofinderManagement\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DoofinderManagement\Model\Item
     */
    public function itemTempCreate($body, $hashid, $name)
    {
        list($response) = $this->itemTempCreateWithHttpInfo($body, $hashid, $name);
        return $response;
    }

    /**
     * Operation itemTempCreateWithHttpInfo
     *
     * Creates an item in the temporal index.
     *
     * @param  map[string,object] $body (required)
     * @param  string $hashid Unique id of a search engine. (required)
     * @param  string $name Name of an index. (required)
     *
     * @throws \DoofinderManagement\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DoofinderManagement\Model\Item, HTTP status code, HTTP response headers (array of strings)
     */
    public function itemTempCreateWithHttpInfo($body, $hashid, $name)
    {
        $returnType = '\DoofinderManagement\Model\Item';
        $request = $this->itemTempCreateRequest($body, $hashid, $name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DoofinderManagement\Model\Item',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation itemTempCreateAsync
     *
     * Creates an item in the temporal index.
     *
     * @param  map[string,object] $body (required)
     * @param  string $hashid Unique id of a search engine. (required)
     * @param  string $name Name of an index. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function itemTempCreateAsync($body, $hashid, $name)
    {
        return $this->itemTempCreateAsyncWithHttpInfo($body, $hashid, $name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation itemTempCreateAsyncWithHttpInfo
     *
     * Creates an item in the temporal index.
     *
     * @param  map[string,object] $body (required)
     * @param  string $hashid Unique id of a search engine. (required)
     * @param  string $name Name of an index. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function itemTempCreateAsyncWithHttpInfo($body, $hashid, $name)
    {
        $returnType = '\DoofinderManagement\Model\Item';
        $request = $this->itemTempCreateRequest($body, $hashid, $name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'itemTempCreate'
     *
     * @param  map[string,object] $body (required)
     * @param  string $hashid Unique id of a search engine. (required)
     * @param  string $name Name of an index. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function itemTempCreateRequest($body, $hashid, $name)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling itemTempCreate'
            );
        }
        // verify the required parameter 'hashid' is set
        if ($hashid === null || (is_array($hashid) && count($hashid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $hashid when calling itemTempCreate'
            );
        }
        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling itemTempCreate'
            );
        }

        $resourcePath = '/api/v2/search_engines/{hashid}/indices/{name}/temp/items/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($hashid !== null) {
            $resourcePath = str_replace(
                '{' . 'hashid' . '}',
                ObjectSerializer::toPathValue($hashid),
                $resourcePath
            );
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation itemTempDelete
     *
     * Deletes an item in the temporal index.
     *
     * @param  string $hashid Unique id of a search engine. (required)
     * @param  string $name Name of an index. (required)
     * @param  string $item_id Unique identifier of an item inside an index. (required)
     *
     * @throws \DoofinderManagement\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function itemTempDelete($hashid, $name, $item_id)
    {
        $this->itemTempDeleteWithHttpInfo($hashid, $name, $item_id);
    }

    /**
     * Operation itemTempDeleteWithHttpInfo
     *
     * Deletes an item in the temporal index.
     *
     * @param  string $hashid Unique id of a search engine. (required)
     * @param  string $name Name of an index. (required)
     * @param  string $item_id Unique identifier of an item inside an index. (required)
     *
     * @throws \DoofinderManagement\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function itemTempDeleteWithHttpInfo($hashid, $name, $item_id)
    {
        $returnType = '';
        $request = $this->itemTempDeleteRequest($hashid, $name, $item_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation itemTempDeleteAsync
     *
     * Deletes an item in the temporal index.
     *
     * @param  string $hashid Unique id of a search engine. (required)
     * @param  string $name Name of an index. (required)
     * @param  string $item_id Unique identifier of an item inside an index. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function itemTempDeleteAsync($hashid, $name, $item_id)
    {
        return $this->itemTempDeleteAsyncWithHttpInfo($hashid, $name, $item_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation itemTempDeleteAsyncWithHttpInfo
     *
     * Deletes an item in the temporal index.
     *
     * @param  string $hashid Unique id of a search engine. (required)
     * @param  string $name Name of an index. (required)
     * @param  string $item_id Unique identifier of an item inside an index. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function itemTempDeleteAsyncWithHttpInfo($hashid, $name, $item_id)
    {
        $returnType = '';
        $request = $this->itemTempDeleteRequest($hashid, $name, $item_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'itemTempDelete'
     *
     * @param  string $hashid Unique id of a search engine. (required)
     * @param  string $name Name of an index. (required)
     * @param  string $item_id Unique identifier of an item inside an index. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function itemTempDeleteRequest($hashid, $name, $item_id)
    {
        // verify the required parameter 'hashid' is set
        if ($hashid === null || (is_array($hashid) && count($hashid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $hashid when calling itemTempDelete'
            );
        }
        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling itemTempDelete'
            );
        }
        // verify the required parameter 'item_id' is set
        if ($item_id === null || (is_array($item_id) && count($item_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $item_id when calling itemTempDelete'
            );
        }

        $resourcePath = '/api/v2/search_engines/{hashid}/indices/{name}/temp/items/{item_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($hashid !== null) {
            $resourcePath = str_replace(
                '{' . 'hashid' . '}',
                ObjectSerializer::toPathValue($hashid),
                $resourcePath
            );
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'item_id' . '}',
                ObjectSerializer::toPathValue($item_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation itemTempShow
     *
     * Gets an item from the temporal index.
     *
     * @param  string $hashid Unique id of a search engine. (required)
     * @param  string $name Name of an index. (required)
     * @param  string $item_id Unique identifier of an item inside an index. (required)
     *
     * @throws \DoofinderManagement\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DoofinderManagement\Model\Item
     */
    public function itemTempShow($hashid, $name, $item_id)
    {
        list($response) = $this->itemTempShowWithHttpInfo($hashid, $name, $item_id);
        return $response;
    }

    /**
     * Operation itemTempShowWithHttpInfo
     *
     * Gets an item from the temporal index.
     *
     * @param  string $hashid Unique id of a search engine. (required)
     * @param  string $name Name of an index. (required)
     * @param  string $item_id Unique identifier of an item inside an index. (required)
     *
     * @throws \DoofinderManagement\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DoofinderManagement\Model\Item, HTTP status code, HTTP response headers (array of strings)
     */
    public function itemTempShowWithHttpInfo($hashid, $name, $item_id)
    {
        $returnType = '\DoofinderManagement\Model\Item';
        $request = $this->itemTempShowRequest($hashid, $name, $item_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DoofinderManagement\Model\Item',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation itemTempShowAsync
     *
     * Gets an item from the temporal index.
     *
     * @param  string $hashid Unique id of a search engine. (required)
     * @param  string $name Name of an index. (required)
     * @param  string $item_id Unique identifier of an item inside an index. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function itemTempShowAsync($hashid, $name, $item_id)
    {
        return $this->itemTempShowAsyncWithHttpInfo($hashid, $name, $item_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation itemTempShowAsyncWithHttpInfo
     *
     * Gets an item from the temporal index.
     *
     * @param  string $hashid Unique id of a search engine. (required)
     * @param  string $name Name of an index. (required)
     * @param  string $item_id Unique identifier of an item inside an index. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function itemTempShowAsyncWithHttpInfo($hashid, $name, $item_id)
    {
        $returnType = '\DoofinderManagement\Model\Item';
        $request = $this->itemTempShowRequest($hashid, $name, $item_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'itemTempShow'
     *
     * @param  string $hashid Unique id of a search engine. (required)
     * @param  string $name Name of an index. (required)
     * @param  string $item_id Unique identifier of an item inside an index. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function itemTempShowRequest($hashid, $name, $item_id)
    {
        // verify the required parameter 'hashid' is set
        if ($hashid === null || (is_array($hashid) && count($hashid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $hashid when calling itemTempShow'
            );
        }
        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling itemTempShow'
            );
        }
        // verify the required parameter 'item_id' is set
        if ($item_id === null || (is_array($item_id) && count($item_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $item_id when calling itemTempShow'
            );
        }

        $resourcePath = '/api/v2/search_engines/{hashid}/indices/{name}/temp/items/{item_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($hashid !== null) {
            $resourcePath = str_replace(
                '{' . 'hashid' . '}',
                ObjectSerializer::toPathValue($hashid),
                $resourcePath
            );
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'item_id' . '}',
                ObjectSerializer::toPathValue($item_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation itemTempUpdate
     *
     * Partially updates an item in the temporal index.
     *
     * @param  map[string,object] $body body (required)
     * @param  string $hashid Unique id of a search engine. (required)
     * @param  string $name Name of an index. (required)
     * @param  string $item_id Unique identifier of an item inside an index. (required)
     *
     * @throws \DoofinderManagement\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DoofinderManagement\Model\Item
     */
    public function itemTempUpdate($body, $hashid, $name, $item_id)
    {
        list($response) = $this->itemTempUpdateWithHttpInfo($body, $hashid, $name, $item_id);
        return $response;
    }

    /**
     * Operation itemTempUpdateWithHttpInfo
     *
     * Partially updates an item in the temporal index.
     *
     * @param  map[string,object] $body (required)
     * @param  string $hashid Unique id of a search engine. (required)
     * @param  string $name Name of an index. (required)
     * @param  string $item_id Unique identifier of an item inside an index. (required)
     *
     * @throws \DoofinderManagement\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DoofinderManagement\Model\Item, HTTP status code, HTTP response headers (array of strings)
     */
    public function itemTempUpdateWithHttpInfo($body, $hashid, $name, $item_id)
    {
        $returnType = '\DoofinderManagement\Model\Item';
        $request = $this->itemTempUpdateRequest($body, $hashid, $name, $item_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DoofinderManagement\Model\Item',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation itemTempUpdateAsync
     *
     * Partially updates an item in the temporal index.
     *
     * @param  map[string,object] $body (required)
     * @param  string $hashid Unique id of a search engine. (required)
     * @param  string $name Name of an index. (required)
     * @param  string $item_id Unique identifier of an item inside an index. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function itemTempUpdateAsync($body, $hashid, $name, $item_id)
    {
        return $this->itemTempUpdateAsyncWithHttpInfo($body, $hashid, $name, $item_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation itemTempUpdateAsyncWithHttpInfo
     *
     * Partially updates an item in the temporal index.
     *
     * @param  map[string,object] $body (required)
     * @param  string $hashid Unique id of a search engine. (required)
     * @param  string $name Name of an index. (required)
     * @param  string $item_id Unique identifier of an item inside an index. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function itemTempUpdateAsyncWithHttpInfo($body, $hashid, $name, $item_id)
    {
        $returnType = '\DoofinderManagement\Model\Item';
        $request = $this->itemTempUpdateRequest($body, $hashid, $name, $item_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'itemTempUpdate'
     *
     * @param  map[string,object] $body (required)
     * @param  string $hashid Unique id of a search engine. (required)
     * @param  string $name Name of an index. (required)
     * @param  string $item_id Unique identifier of an item inside an index. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function itemTempUpdateRequest($body, $hashid, $name, $item_id)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling itemTempUpdate'
            );
        }
        // verify the required parameter 'hashid' is set
        if ($hashid === null || (is_array($hashid) && count($hashid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $hashid when calling itemTempUpdate'
            );
        }
        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling itemTempUpdate'
            );
        }
        // verify the required parameter 'item_id' is set
        if ($item_id === null || (is_array($item_id) && count($item_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $item_id when calling itemTempUpdate'
            );
        }

        $resourcePath = '/api/v2/search_engines/{hashid}/indices/{name}/temp/items/{item_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($hashid !== null) {
            $resourcePath = str_replace(
                '{' . 'hashid' . '}',
                ObjectSerializer::toPathValue($hashid),
                $resourcePath
            );
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'item_id' . '}',
                ObjectSerializer::toPathValue($item_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation itemUpdate
     *
     * Partially updates an item in the index.
     *
     * @param  map[string,object] $body body (required)
     * @param  string $hashid Unique id of a search engine. (required)
     * @param  string $name Name of an index. (required)
     * @param  string $item_id Unique identifier of an item inside an index. (required)
     *
     * @throws \DoofinderManagement\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DoofinderManagement\Model\Item
     */
    public function itemUpdate($body, $hashid, $name, $item_id)
    {
        list($response) = $this->itemUpdateWithHttpInfo($body, $hashid, $name, $item_id);
        return $response;
    }

    /**
     * Operation itemUpdateWithHttpInfo
     *
     * Partially updates an item in the index.
     *
     * @param  map[string,object] $body (required)
     * @param  string $hashid Unique id of a search engine. (required)
     * @param  string $name Name of an index. (required)
     * @param  string $item_id Unique identifier of an item inside an index. (required)
     *
     * @throws \DoofinderManagement\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DoofinderManagement\Model\Item, HTTP status code, HTTP response headers (array of strings)
     */
    public function itemUpdateWithHttpInfo($body, $hashid, $name, $item_id)
    {
        $returnType = '\DoofinderManagement\Model\Item';
        $request = $this->itemUpdateRequest($body, $hashid, $name, $item_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DoofinderManagement\Model\Item',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation itemUpdateAsync
     *
     * Partially updates an item in the index.
     *
     * @param  map[string,object] $body (required)
     * @param  string $hashid Unique id of a search engine. (required)
     * @param  string $name Name of an index. (required)
     * @param  string $item_id Unique identifier of an item inside an index. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function itemUpdateAsync($body, $hashid, $name, $item_id)
    {
        return $this->itemUpdateAsyncWithHttpInfo($body, $hashid, $name, $item_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation itemUpdateAsyncWithHttpInfo
     *
     * Partially updates an item in the index.
     *
     * @param  map[string,object] $body (required)
     * @param  string $hashid Unique id of a search engine. (required)
     * @param  string $name Name of an index. (required)
     * @param  string $item_id Unique identifier of an item inside an index. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function itemUpdateAsyncWithHttpInfo($body, $hashid, $name, $item_id)
    {
        $returnType = '\DoofinderManagement\Model\Item';
        $request = $this->itemUpdateRequest($body, $hashid, $name, $item_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'itemUpdate'
     *
     * @param  map[string,object] $body (required)
     * @param  string $hashid Unique id of a search engine. (required)
     * @param  string $name Name of an index. (required)
     * @param  string $item_id Unique identifier of an item inside an index. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function itemUpdateRequest($body, $hashid, $name, $item_id)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling itemUpdate'
            );
        }
        // verify the required parameter 'hashid' is set
        if ($hashid === null || (is_array($hashid) && count($hashid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $hashid when calling itemUpdate'
            );
        }
        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling itemUpdate'
            );
        }
        // verify the required parameter 'item_id' is set
        if ($item_id === null || (is_array($item_id) && count($item_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $item_id when calling itemUpdate'
            );
        }

        $resourcePath = '/api/v2/search_engines/{hashid}/indices/{name}/items/{item_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($hashid !== null) {
            $resourcePath = str_replace(
                '{' . 'hashid' . '}',
                ObjectSerializer::toPathValue($hashid),
                $resourcePath
            );
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'item_id' . '}',
                ObjectSerializer::toPathValue($item_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation itemsBulkCreate
     *
     * Creates a bulk of item in the index.
     *
     * @param  \DoofinderManagement\Model\ItemsIdsInner[] $body body (required)
     * @param  string $hashid Unique id of a search engine. (required)
     * @param  string $name Name of an index. (required)
     *
     * @throws \DoofinderManagement\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DoofinderManagement\Model\BulkResult
     */
    public function itemsBulkCreate($body, $hashid, $name)
    {
        list($response) = $this->itemsBulkCreateWithHttpInfo($body, $hashid, $name);
        return $response;
    }

    /**
     * Operation itemsBulkCreateWithHttpInfo
     *
     * Creates a bulk of item in the index.
     *
     * @param  \DoofinderManagement\Model\ItemsIdsInner[] $body (required)
     * @param  string $hashid Unique id of a search engine. (required)
     * @param  string $name Name of an index. (required)
     *
     * @throws \DoofinderManagement\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DoofinderManagement\Model\BulkResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function itemsBulkCreateWithHttpInfo($body, $hashid, $name)
    {
        $returnType = '\DoofinderManagement\Model\BulkResult';
        $request = $this->itemsBulkCreateRequest($body, $hashid, $name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DoofinderManagement\Model\BulkResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation itemsBulkCreateAsync
     *
     * Creates a bulk of item in the index.
     *
     * @param  \DoofinderManagement\Model\ItemsIdsInner[] $body (required)
     * @param  string $hashid Unique id of a search engine. (required)
     * @param  string $name Name of an index. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function itemsBulkCreateAsync($body, $hashid, $name)
    {
        return $this->itemsBulkCreateAsyncWithHttpInfo($body, $hashid, $name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation itemsBulkCreateAsyncWithHttpInfo
     *
     * Creates a bulk of item in the index.
     *
     * @param  \DoofinderManagement\Model\ItemsIdsInner[] $body (required)
     * @param  string $hashid Unique id of a search engine. (required)
     * @param  string $name Name of an index. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function itemsBulkCreateAsyncWithHttpInfo($body, $hashid, $name)
    {
        $returnType = '\DoofinderManagement\Model\BulkResult';
        $request = $this->itemsBulkCreateRequest($body, $hashid, $name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'itemsBulkCreate'
     *
     * @param  \DoofinderManagement\Model\ItemsIdsInner[] $body (required)
     * @param  string $hashid Unique id of a search engine. (required)
     * @param  string $name Name of an index. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function itemsBulkCreateRequest($body, $hashid, $name)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling itemsBulkCreate'
            );
        }
        // verify the required parameter 'hashid' is set
        if ($hashid === null || (is_array($hashid) && count($hashid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $hashid when calling itemsBulkCreate'
            );
        }
        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling itemsBulkCreate'
            );
        }

        $resourcePath = '/api/v2/search_engines/{hashid}/indices/{name}/items/_bulk';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($hashid !== null) {
            $resourcePath = str_replace(
                '{' . 'hashid' . '}',
                ObjectSerializer::toPathValue($hashid),
                $resourcePath
            );
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation itemsBulkDelete
     *
     * Deletes a bulk of items from the index.
     *
     * @param  \DoofinderManagement\Model\ItemsIdsInner[] $body body (required)
     * @param  string $hashid Unique id of a search engine. (required)
     * @param  string $name Name of an index. (required)
     *
     * @throws \DoofinderManagement\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DoofinderManagement\Model\BulkResult
     */
    public function itemsBulkDelete($body, $hashid, $name)
    {
        list($response) = $this->itemsBulkDeleteWithHttpInfo($body, $hashid, $name);
        return $response;
    }

    /**
     * Operation itemsBulkDeleteWithHttpInfo
     *
     * Deletes a bulk of items from the index.
     *
     * @param  \DoofinderManagement\Model\ItemsIdsInner[] $body (required)
     * @param  string $hashid Unique id of a search engine. (required)
     * @param  string $name Name of an index. (required)
     *
     * @throws \DoofinderManagement\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DoofinderManagement\Model\BulkResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function itemsBulkDeleteWithHttpInfo($body, $hashid, $name)
    {
        $returnType = '\DoofinderManagement\Model\BulkResult';
        $request = $this->itemsBulkDeleteRequest($body, $hashid, $name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DoofinderManagement\Model\BulkResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation itemsBulkDeleteAsync
     *
     * Deletes a bulk of items from the index.
     *
     * @param  \DoofinderManagement\Model\ItemsIdsInner[] $body (required)
     * @param  string $hashid Unique id of a search engine. (required)
     * @param  string $name Name of an index. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function itemsBulkDeleteAsync($body, $hashid, $name)
    {
        return $this->itemsBulkDeleteAsyncWithHttpInfo($body, $hashid, $name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation itemsBulkDeleteAsyncWithHttpInfo
     *
     * Deletes a bulk of items from the index.
     *
     * @param  \DoofinderManagement\Model\ItemsIdsInner[] $body (required)
     * @param  string $hashid Unique id of a search engine. (required)
     * @param  string $name Name of an index. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function itemsBulkDeleteAsyncWithHttpInfo($body, $hashid, $name)
    {
        $returnType = '\DoofinderManagement\Model\BulkResult';
        $request = $this->itemsBulkDeleteRequest($body, $hashid, $name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'itemsBulkDelete'
     *
     * @param  \DoofinderManagement\Model\ItemsIdsInner[] $body (required)
     * @param  string $hashid Unique id of a search engine. (required)
     * @param  string $name Name of an index. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function itemsBulkDeleteRequest($body, $hashid, $name)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling itemsBulkDelete'
            );
        }
        // verify the required parameter 'hashid' is set
        if ($hashid === null || (is_array($hashid) && count($hashid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $hashid when calling itemsBulkDelete'
            );
        }
        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling itemsBulkDelete'
            );
        }

        $resourcePath = '/api/v2/search_engines/{hashid}/indices/{name}/items/_bulk';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($hashid !== null) {
            $resourcePath = str_replace(
                '{' . 'hashid' . '}',
                ObjectSerializer::toPathValue($hashid),
                $resourcePath
            );
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation itemsBulkUpdate
     *
     * Partial updates a bulk of items in the index.
     *
     * @param  \DoofinderManagement\Model\Item[] $body body (required)
     * @param  string $hashid Unique id of a search engine. (required)
     * @param  string $name Name of an index. (required)
     *
     * @throws \DoofinderManagement\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DoofinderManagement\Model\BulkResult
     */
    public function itemsBulkUpdate($body, $hashid, $name)
    {
        list($response) = $this->itemsBulkUpdateWithHttpInfo($body, $hashid, $name);
        return $response;
    }

    /**
     * Operation itemsBulkUpdateWithHttpInfo
     *
     * Partial updates a bulk of items in the index.
     *
     * @param  \DoofinderManagement\Model\Item[] $body (required)
     * @param  string $hashid Unique id of a search engine. (required)
     * @param  string $name Name of an index. (required)
     *
     * @throws \DoofinderManagement\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DoofinderManagement\Model\BulkResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function itemsBulkUpdateWithHttpInfo($body, $hashid, $name)
    {
        $returnType = '\DoofinderManagement\Model\BulkResult';
        $request = $this->itemsBulkUpdateRequest($body, $hashid, $name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DoofinderManagement\Model\BulkResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation itemsBulkUpdateAsync
     *
     * Partial updates a bulk of items in the index.
     *
     * @param  \DoofinderManagement\Model\Item[] $body (required)
     * @param  string $hashid Unique id of a search engine. (required)
     * @param  string $name Name of an index. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function itemsBulkUpdateAsync($body, $hashid, $name)
    {
        return $this->itemsBulkUpdateAsyncWithHttpInfo($body, $hashid, $name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation itemsBulkUpdateAsyncWithHttpInfo
     *
     * Partial updates a bulk of items in the index.
     *
     * @param  \DoofinderManagement\Model\Item[] $body (required)
     * @param  string $hashid Unique id of a search engine. (required)
     * @param  string $name Name of an index. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function itemsBulkUpdateAsyncWithHttpInfo($body, $hashid, $name)
    {
        $returnType = '\DoofinderManagement\Model\BulkResult';
        $request = $this->itemsBulkUpdateRequest($body, $hashid, $name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'itemsBulkUpdate'
     *
     * @param  \DoofinderManagement\Model\Item[] $body (required)
     * @param  string $hashid Unique id of a search engine. (required)
     * @param  string $name Name of an index. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function itemsBulkUpdateRequest($body, $hashid, $name)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling itemsBulkUpdate'
            );
        }
        // verify the required parameter 'hashid' is set
        if ($hashid === null || (is_array($hashid) && count($hashid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $hashid when calling itemsBulkUpdate'
            );
        }
        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling itemsBulkUpdate'
            );
        }

        $resourcePath = '/api/v2/search_engines/{hashid}/indices/{name}/items/_bulk';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($hashid !== null) {
            $resourcePath = str_replace(
                '{' . 'hashid' . '}',
                ObjectSerializer::toPathValue($hashid),
                $resourcePath
            );
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation itemsMget
     *
     * Retrieves a list of items.
     *
     * @param  \DoofinderManagement\Model\ItemsIdsInner[] $body body (required)
     * @param  string $hashid Unique id of a search engine. (required)
     * @param  string $name Name of an index. (required)
     *
     * @throws \DoofinderManagement\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DoofinderManagement\Model\MGETResponse
     */
    public function itemsMget($body, $hashid, $name)
    {
        list($response) = $this->itemsMgetWithHttpInfo($body, $hashid, $name);
        return $response;
    }

    /**
     * Operation itemsMgetWithHttpInfo
     *
     * Retrieves a list of items.
     *
     * @param  \DoofinderManagement\Model\ItemsIdsInner[] $body (required)
     * @param  string $hashid Unique id of a search engine. (required)
     * @param  string $name Name of an index. (required)
     *
     * @throws \DoofinderManagement\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DoofinderManagement\Model\MGETResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function itemsMgetWithHttpInfo($body, $hashid, $name)
    {
        $returnType = '\DoofinderManagement\Model\MGETResponse';
        $request = $this->itemsMgetRequest($body, $hashid, $name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DoofinderManagement\Model\MGETResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation itemsMgetAsync
     *
     * Retrieves a list of items.
     *
     * @param  \DoofinderManagement\Model\ItemsIdsInner[] $body (required)
     * @param  string $hashid Unique id of a search engine. (required)
     * @param  string $name Name of an index. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function itemsMgetAsync($body, $hashid, $name)
    {
        return $this->itemsMgetAsyncWithHttpInfo($body, $hashid, $name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation itemsMgetAsyncWithHttpInfo
     *
     * Retrieves a list of items.
     *
     * @param  \DoofinderManagement\Model\ItemsIdsInner[] $body (required)
     * @param  string $hashid Unique id of a search engine. (required)
     * @param  string $name Name of an index. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function itemsMgetAsyncWithHttpInfo($body, $hashid, $name)
    {
        $returnType = '\DoofinderManagement\Model\MGETResponse';
        $request = $this->itemsMgetRequest($body, $hashid, $name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'itemsMget'
     *
     * @param  \DoofinderManagement\Model\ItemsIdsInner[] $body (required)
     * @param  string $hashid Unique id of a search engine. (required)
     * @param  string $name Name of an index. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function itemsMgetRequest($body, $hashid, $name)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling itemsMget'
            );
        }
        // verify the required parameter 'hashid' is set
        if ($hashid === null || (is_array($hashid) && count($hashid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $hashid when calling itemsMget'
            );
        }
        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling itemsMget'
            );
        }

        $resourcePath = '/api/v2/search_engines/{hashid}/indices/{name}/items/_mget';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($hashid !== null) {
            $resourcePath = str_replace(
                '{' . 'hashid' . '}',
                ObjectSerializer::toPathValue($hashid),
                $resourcePath
            );
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation itemsTempBulkCreate
     *
     * Creates a bulk of items in the temporal index.
     *
     * @param  \DoofinderManagement\Model\Item[] $body body (required)
     * @param  string $hashid Unique id of a search engine. (required)
     * @param  string $name Name of an index. (required)
     *
     * @throws \DoofinderManagement\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DoofinderManagement\Model\BulkResult
     */
    public function itemsTempBulkCreate($body, $hashid, $name)
    {
        list($response) = $this->itemsTempBulkCreateWithHttpInfo($body, $hashid, $name);
        return $response;
    }

    /**
     * Operation itemsTempBulkCreateWithHttpInfo
     *
     * Creates a bulk of items in the temporal index.
     *
     * @param  \DoofinderManagement\Model\Item[] $body (required)
     * @param  string $hashid Unique id of a search engine. (required)
     * @param  string $name Name of an index. (required)
     *
     * @throws \DoofinderManagement\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DoofinderManagement\Model\BulkResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function itemsTempBulkCreateWithHttpInfo($body, $hashid, $name)
    {
        $returnType = '\DoofinderManagement\Model\BulkResult';
        $request = $this->itemsTempBulkCreateRequest($body, $hashid, $name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DoofinderManagement\Model\BulkResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation itemsTempBulkCreateAsync
     *
     * Creates a bulk of items in the temporal index.
     *
     * @param  \DoofinderManagement\Model\Item[] $body (required)
     * @param  string $hashid Unique id of a search engine. (required)
     * @param  string $name Name of an index. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function itemsTempBulkCreateAsync($body, $hashid, $name)
    {
        return $this->itemsTempBulkCreateAsyncWithHttpInfo($body, $hashid, $name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation itemsTempBulkCreateAsyncWithHttpInfo
     *
     * Creates a bulk of items in the temporal index.
     *
     * @param  \DoofinderManagement\Model\Item[] $body (required)
     * @param  string $hashid Unique id of a search engine. (required)
     * @param  string $name Name of an index. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function itemsTempBulkCreateAsyncWithHttpInfo($body, $hashid, $name)
    {
        $returnType = '\DoofinderManagement\Model\BulkResult';
        $request = $this->itemsTempBulkCreateRequest($body, $hashid, $name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'itemsTempBulkCreate'
     *
     * @param  \DoofinderManagement\Model\Item[] $body (required)
     * @param  string $hashid Unique id of a search engine. (required)
     * @param  string $name Name of an index. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function itemsTempBulkCreateRequest($body, $hashid, $name)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling itemsTempBulkCreate'
            );
        }
        // verify the required parameter 'hashid' is set
        if ($hashid === null || (is_array($hashid) && count($hashid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $hashid when calling itemsTempBulkCreate'
            );
        }
        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling itemsTempBulkCreate'
            );
        }

        $resourcePath = '/api/v2/search_engines/{hashid}/indices/{name}/temp/items/_bulk';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($hashid !== null) {
            $resourcePath = str_replace(
                '{' . 'hashid' . '}',
                ObjectSerializer::toPathValue($hashid),
                $resourcePath
            );
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation itemsTempBulkDelete
     *
     * Deletes items in bulk in the temporal index.
     *
     * @param  \DoofinderManagement\Model\ItemsIdsInner[] $body body (required)
     * @param  string $hashid Unique id of a search engine. (required)
     * @param  string $name Name of an index. (required)
     *
     * @throws \DoofinderManagement\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DoofinderManagement\Model\BulkResult
     */
    public function itemsTempBulkDelete($body, $hashid, $name)
    {
        list($response) = $this->itemsTempBulkDeleteWithHttpInfo($body, $hashid, $name);
        return $response;
    }

    /**
     * Operation itemsTempBulkDeleteWithHttpInfo
     *
     * Deletes items in bulk in the temporal index.
     *
     * @param  \DoofinderManagement\Model\ItemsIdsInner[] $body (required)
     * @param  string $hashid Unique id of a search engine. (required)
     * @param  string $name Name of an index. (required)
     *
     * @throws \DoofinderManagement\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DoofinderManagement\Model\BulkResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function itemsTempBulkDeleteWithHttpInfo($body, $hashid, $name)
    {
        $returnType = '\DoofinderManagement\Model\BulkResult';
        $request = $this->itemsTempBulkDeleteRequest($body, $hashid, $name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DoofinderManagement\Model\BulkResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation itemsTempBulkDeleteAsync
     *
     * Deletes items in bulk in the temporal index.
     *
     * @param  \DoofinderManagement\Model\ItemsIdsInner[] $body (required)
     * @param  string $hashid Unique id of a search engine. (required)
     * @param  string $name Name of an index. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function itemsTempBulkDeleteAsync($body, $hashid, $name)
    {
        return $this->itemsTempBulkDeleteAsyncWithHttpInfo($body, $hashid, $name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation itemsTempBulkDeleteAsyncWithHttpInfo
     *
     * Deletes items in bulk in the temporal index.
     *
     * @param  \DoofinderManagement\Model\ItemsIdsInner[] $body (required)
     * @param  string $hashid Unique id of a search engine. (required)
     * @param  string $name Name of an index. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function itemsTempBulkDeleteAsyncWithHttpInfo($body, $hashid, $name)
    {
        $returnType = '\DoofinderManagement\Model\BulkResult';
        $request = $this->itemsTempBulkDeleteRequest($body, $hashid, $name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'itemsTempBulkDelete'
     *
     * @param  \DoofinderManagement\Model\ItemsIdsInner[] $body (required)
     * @param  string $hashid Unique id of a search engine. (required)
     * @param  string $name Name of an index. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function itemsTempBulkDeleteRequest($body, $hashid, $name)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling itemsTempBulkDelete'
            );
        }
        // verify the required parameter 'hashid' is set
        if ($hashid === null || (is_array($hashid) && count($hashid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $hashid when calling itemsTempBulkDelete'
            );
        }
        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling itemsTempBulkDelete'
            );
        }

        $resourcePath = '/api/v2/search_engines/{hashid}/indices/{name}/temp/items/_bulk';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($hashid !== null) {
            $resourcePath = str_replace(
                '{' . 'hashid' . '}',
                ObjectSerializer::toPathValue($hashid),
                $resourcePath
            );
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation itemsTempBulkUpdate
     *
     * Partial updates a bulk of items in the temporal index.
     *
     * @param  \DoofinderManagement\Model\Item[] $body body (required)
     * @param  string $hashid Unique id of a search engine. (required)
     * @param  string $name Name of an index. (required)
     *
     * @throws \DoofinderManagement\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DoofinderManagement\Model\BulkResult
     */
    public function itemsTempBulkUpdate($body, $hashid, $name)
    {
        list($response) = $this->itemsTempBulkUpdateWithHttpInfo($body, $hashid, $name);
        return $response;
    }

    /**
     * Operation itemsTempBulkUpdateWithHttpInfo
     *
     * Partial updates a bulk of items in the temporal index.
     *
     * @param  \DoofinderManagement\Model\Item[] $body (required)
     * @param  string $hashid Unique id of a search engine. (required)
     * @param  string $name Name of an index. (required)
     *
     * @throws \DoofinderManagement\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DoofinderManagement\Model\BulkResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function itemsTempBulkUpdateWithHttpInfo($body, $hashid, $name)
    {
        $returnType = '\DoofinderManagement\Model\BulkResult';
        $request = $this->itemsTempBulkUpdateRequest($body, $hashid, $name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DoofinderManagement\Model\BulkResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation itemsTempBulkUpdateAsync
     *
     * Partial updates a bulk of items in the temporal index.
     *
     * @param  \DoofinderManagement\Model\Item[] $body (required)
     * @param  string $hashid Unique id of a search engine. (required)
     * @param  string $name Name of an index. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function itemsTempBulkUpdateAsync($body, $hashid, $name)
    {
        return $this->itemsTempBulkUpdateAsyncWithHttpInfo($body, $hashid, $name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation itemsTempBulkUpdateAsyncWithHttpInfo
     *
     * Partial updates a bulk of items in the temporal index.
     *
     * @param  \DoofinderManagement\Model\Item[] $body (required)
     * @param  string $hashid Unique id of a search engine. (required)
     * @param  string $name Name of an index. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function itemsTempBulkUpdateAsyncWithHttpInfo($body, $hashid, $name)
    {
        $returnType = '\DoofinderManagement\Model\BulkResult';
        $request = $this->itemsTempBulkUpdateRequest($body, $hashid, $name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'itemsTempBulkUpdate'
     *
     * @param  \DoofinderManagement\Model\Item[] $body (required)
     * @param  string $hashid Unique id of a search engine. (required)
     * @param  string $name Name of an index. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function itemsTempBulkUpdateRequest($body, $hashid, $name)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling itemsTempBulkUpdate'
            );
        }
        // verify the required parameter 'hashid' is set
        if ($hashid === null || (is_array($hashid) && count($hashid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $hashid when calling itemsTempBulkUpdate'
            );
        }
        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling itemsTempBulkUpdate'
            );
        }

        $resourcePath = '/api/v2/search_engines/{hashid}/indices/{name}/temp/items/_bulk';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($hashid !== null) {
            $resourcePath = str_replace(
                '{' . 'hashid' . '}',
                ObjectSerializer::toPathValue($hashid),
                $resourcePath
            );
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation itemsTempMget
     *
     * Retrieves a list of items.
     *
     * @param  \DoofinderManagement\Model\ItemsIdsInner[] $body body (required)
     * @param  string $hashid Unique id of a search engine. (required)
     * @param  string $name Name of an index. (required)
     *
     * @throws \DoofinderManagement\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DoofinderManagement\Model\MGETResponse
     */
    public function itemsTempMget($body, $hashid, $name)
    {
        list($response) = $this->itemsTempMgetWithHttpInfo($body, $hashid, $name);
        return $response;
    }

    /**
     * Operation itemsTempMgetWithHttpInfo
     *
     * Retrieves a list of items.
     *
     * @param  \DoofinderManagement\Model\ItemsIdsInner[] $body (required)
     * @param  string $hashid Unique id of a search engine. (required)
     * @param  string $name Name of an index. (required)
     *
     * @throws \DoofinderManagement\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DoofinderManagement\Model\MGETResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function itemsTempMgetWithHttpInfo($body, $hashid, $name)
    {
        $returnType = '\DoofinderManagement\Model\MGETResponse';
        $request = $this->itemsTempMgetRequest($body, $hashid, $name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DoofinderManagement\Model\MGETResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation itemsTempMgetAsync
     *
     * Retrieves a list of items.
     *
     * @param  \DoofinderManagement\Model\ItemsIdsInner[] $body (required)
     * @param  string $hashid Unique id of a search engine. (required)
     * @param  string $name Name of an index. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function itemsTempMgetAsync($body, $hashid, $name)
    {
        return $this->itemsTempMgetAsyncWithHttpInfo($body, $hashid, $name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation itemsTempMgetAsyncWithHttpInfo
     *
     * Retrieves a list of items.
     *
     * @param  \DoofinderManagement\Model\ItemsIdsInner[] $body (required)
     * @param  string $hashid Unique id of a search engine. (required)
     * @param  string $name Name of an index. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function itemsTempMgetAsyncWithHttpInfo($body, $hashid, $name)
    {
        $returnType = '\DoofinderManagement\Model\MGETResponse';
        $request = $this->itemsTempMgetRequest($body, $hashid, $name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'itemsTempMget'
     *
     * @param  \DoofinderManagement\Model\ItemsIdsInner[] $body (required)
     * @param  string $hashid Unique id of a search engine. (required)
     * @param  string $name Name of an index. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function itemsTempMgetRequest($body, $hashid, $name)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling itemsTempMget'
            );
        }
        // verify the required parameter 'hashid' is set
        if ($hashid === null || (is_array($hashid) && count($hashid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $hashid when calling itemsTempMget'
            );
        }
        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling itemsTempMget'
            );
        }

        $resourcePath = '/api/v2/search_engines/{hashid}/indices/{name}/temp/items/_mget';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($hashid !== null) {
            $resourcePath = str_replace(
                '{' . 'hashid' . '}',
                ObjectSerializer::toPathValue($hashid),
                $resourcePath
            );
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
